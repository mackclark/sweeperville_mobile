ARCHITECTURE
I implemented my project using the Ionic framework, which is an open source SDK built for developing hybrid mobile apps. I chose to use Ionic because it allows you to develop apps for both Android and iOS using the same code, and because it is built with the JavaScript framework AngularJS, so you can create an app with just HTML, CSS, and JS.  I used Phonegap to compile the app. Phonegap is a tool that takes your code and compiles it into an the files which you can then download onto your phone and install. Though in theory the app would work for both iOS and Android, it is currently only possible to install it on an Android device. In order to create builds for iOS (even just for testing, not distribution), you need to obtain iOS signing keys by registering as an Apple developer. I made the decision not to register at this time, because it costs $99/year to do so. 

Another advantage of Ionic is that it comes with a set of UI components and themes built in. You can use these components such as pre-styled lists, buttons, and nav bars as building blocks for your app. This was helpful for someone like me who is not visually design oriented, because it allowed me to focus on the core functionality of the app without spending a lot of time on style and layout. Ionic comes with  many files baked in, so in order to help you navigate that, I've noted below in my explanations which files  I authored. 


SAVING YOUR PARKING SPOT
I implemented this functionality using local storage, so the parking spot is saved in the user's local storage on the device rather than in a database. The code for that is located in the localStorageObjects service insweeperville/myApp/www/js/services.js. I also intend to add the streetsweeping schedule to the future database, but for the time being it is just saved in JSON format in a file in the app and I am faking an endpoint to serve the data. You can see where I implemented that in services.js in the getSchedule service, which is being called from the ListCtrl controller in sweeperville/myApp/www/js/sweeperville.js. It would be ideal if the city of Somerville had a public API that I could use to fetch the streetsweeping schedule, but unfortunately they do not.

In order to get the streetsweeping schedule, I used a tool called kimono that scrapes data from websites. That tool has unfortunately since been discontinued, which presents a problem for me since the schedule will presumably not stay the same forever and will need to be periodically updated. To get around this for the future, I'm going to try some old fashioned asking nicely to see if the city will just send me the schedule in an excel sheet or similar.

GEOLOCATION
I used the google maps API for geolocation, and a third-party angular module called angularjs-geolocation, which consists of an angular wrapper around window.navigator.geolocation. The app fetches the user's location and displays it on a small map, and then uses reverse geocoding to translate it into an address. That is happening in the geolocationService service in services.js. Once the location is returned and reverse geocoded, I convert it into a more useful format for my purposes in the LocateCtrl in sweeperville.js. I then display what street the user is currently on and whether it is the odd or even side. Since geolocation is not always 100% accurate, I ask the user to confirm if the location is correct. If so, I search for that street/side in the streetsweeping schedule, determine if it will be swept that day or the next, and tell the user whether or not they need to move their car. If the geolocation is not accurate, or the user simply prefers to search through a list for their street, they can do so in the list view. Typing into the search bar filters the list by the search terms- I used angular's ng-model directive to achieve this. If the user selects a street from this list, the app once again checks to see if that street is being swept today or tomorrow and lets the user know. 

MANAGING DATE INFORMATION
In order to translate the date object into the format of "2nd tuesday," "third Friday," etc. I adapted some third-party code by refactoring and simplifying it, and converting it into an angular service. This code is in the dateService service in services.js. The code that sets up the routing for the app can be found in sweeperville/myApp/www/js/app.js in the config function. Each state declared there represents a view in the app, except for the tab state which is a parent view that only includes the navigation, and each of the other views is nested under it.  The templates for each of these views is located in sweeperville/myApp/www/templates/. The tab view came baked in with Ionic, so I did not author this file, but I did edit it. The focus of my project was not on design and style, so I only wrote minimal css, which is located in sweeperville/myApp/www/css/style.css.

NEXT STEPS
My original intent for the project was to create a full back end for the app which used flask to communicate with a database and create an API. The API would be consumed on the front end to allow users to register, log in, and save their parking spot. I spent a lot of time trying to implement this, and ultimately ran out of time, but I plan on adding it in in the future. For the time being, there is no login or register functionality, but the user can save their parking spot using local storage rather than a real database. 
My proposal for this project was pretty large scale, and I was not able to implement all of the things I had planned on. However, I think that what I implemented works well as is.  I do plan to continue working on the app and implementing a real database, setting up notifications to send users a reminder when it's time to move the car, making the app more visually appealing, creating a build for iOS devices, and possibly releasing it to Google Play and the App Store.  

